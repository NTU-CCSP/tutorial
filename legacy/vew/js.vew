:title 學 Javascript

:description 不囉唆學 Javascript reveal.js 製作的 HTML / CSS / JS 投影片。
:author MrOrz
:email johnsonliang7@gmail.com

:stylesheet_link_tag css/main.css, css/styles.css, css/sample.css, css/jquery-ui.css
:stylesheet_link_tag css/ruler.css, lib/zenburn.css

:javascript_include_tag js/jquery.min.js
:javascript_include_tag js/jquery-ui.min.js
:javascript_include_tag js/reveal.js, lib/highlight.js, js/sample.js, js/init-js.js, js/index.js, js/ruler.js

!SLIDE
  Javascript
  ===
  {:.nav}
  * [html.html](HTML)
  * [css.html](CSS)
  * [advancedjs.html](Advanced JS)

  {:.leader}
  按 <kbd>Space</kbd> 概覽

!SLIDE
  ![images/js/what-js-look-like-1.jpg](1)
  {:.fragment}
  ![images/js/what-js-look-like-2.jpg](2)

!SLIDE
  長這樣
  -----
  {:.demo.small.leader}
  ~~~
    var form = document.getElementById('submitform');
    form.addEventListener('submit', function(e){
      var checkbox = document.getElementById('tos');
      if(!checkbox.checked){
        alert('請詳閱出師表。');
        e.preventDefault();
      }
    });
  ~~~

  {:.fragment}
  * Javascript 操作 DOM (HTML 的 API) 的範例。
  * `document` 是 DOM 物件，<br>`getElementById`, `addEventListener` 是 DOM 方法。
  * 變數需要[?variable](事先定義)，但不指定型別。

{:.chapter}
!SLIDE
  牛刀小試
  --------

!STACK
  !SLIDE
    怎麼寫
    ------
    <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>j</kbd> 打開 Javascript Console。

    ![images/js/console.png](Javascript console)

    輸入一行 Javascript (黑色)，輸出一行回傳值 （藍色）

    試試 `3+2`, `Math.sin(Math.PI)`, `0.1 + 0.2`

  {:#variable}
  !SLIDE
    變數與型別
    ----------
    {:.leader}
    * Javascript 為弱型別（weak typing）語言
    * 用 `var` 敘述定義變數
    * 變數可以是任何型態的東西<br>`var a = 3`：`a` 的型態會是 `number`
    * 大小寫有差

    ```
      var a = "str", A; // a != A
      a = 3; // 換型態
    ```

  !SLIDE
    運算子
    ------
    {:.leader}
    * 負數 : `-` (如 `-35`)
    * 算數 : `*` &nbsp; `/` &nbsp; `%` &nbsp; `+` &nbsp; `-`
    * 比大小 : `===`  &nbsp; `!==`  &nbsp; `<`  &nbsp; `>`  &nbsp; `<=` &nbsp;  `>=`
    * 邏輯運算 : `&&` &nbsp;  `||` &nbsp;  `!`
    * 三元運算子 : `? :`
    * 指派 : `=` &nbsp; `+=` &nbsp; `-=` &nbsp; `*=` &nbsp; `/=` &nbsp; `%=`


  !SLIDE
    文字與數字
    ------
    * 數字 `+` 數字 是加法。
    * 任何東西 `+` 字串、字串 `+` 任何東西：字串串接
    * 轉字串時會嘗試呼叫其 toString 方法
    
    ![images/js/string-number.png](字串加數字等於字串)

    ---

    `parseInt(str, base)`, `parseFloat(str, base)` : 文字轉數字
    ![images/js/parseInt.png](parseInt)

  !SLIDE
    輸出文字
    --------
    * `console.log(東西)` → <b>寫進 Console。</b><br> 若東西是陣列或物件，可以看到內容。
    * `document.write(東西)` → <b>把東西轉成字串，寫進 HTML。</b>

    ---

    {:.fragment}
    通常<strong>不會</strong>使用 `document.write`。<br> 這個教學網頁用 `document.write` 印出資料當作示例，但開發時一般用更方便的 `console.log`。

  !SLIDE
    JavaSCRIPT
    ------
    寫在一個檔案裡面，才有「腳本」的 FU

    <div class="fragment">
      用 `<script type="text/javascript"></script>` 包住，放在 HTML 裡

    {:.html}
      ~~~
        &lt;script type="text/javascript"&gt;
          document.write("script 標籤裡好溫暖喔 (羞)");
        &lt;/script&gt;
      ~~~
    </div>

  !SLIDE
    Javascript file
    ---------------

    * 另外寫成一個 *.js 檔
    *  `<script type="text/javascript" src="路徑與檔名"></script>`

    {:.html}
    ~~~
        &lt;script type="text/javascript" src="sample/included.js"&gt;&lt;/script&gt;
        <p>我是內文</p>
    ~~~

    {:.fragment}
    `<script>` 寫在 `<head>` 或 `<body>` 裡都可以。<br>瀏覽器一讀到就會立即執行（Load-and-go）。

  !SLIDE
    Javascript file (續)
    --------------------
    JS 檔和 HTML 檔同目錄
    ![images/js/js-hierachy.jpg](JS 檔案結構)

    執行結果：
    ![images/js/js-test.jpg](JS 檔案結構)

  !SLIDE
    Javascript file (續)
    --------------------
    JS 檔和 HTML 檔不同目錄
    ![images/js/js-hierachy2.jpg](JS 檔案結構)

!ENDSTACK

{:.chapter}
!SLIDE
  JS 和 C 很像
  -----
  程式流程控制方面

!STACK
  !SLIDE
    `if` 條件
    --

    `if`-`else if`-`else`-`endif`

    ~~~
      var year = 2012;
      if(year % 400 === 0){
        document.write('閏年');
      }else if(year % 100 === 0){
        document.write('不是閏年');
      }else if(year % 4 === 0){
        document.write('閏年');
      }else{
        document.write('不是閏年');
      }
    ~~~

  !SLIDE
    迴圈
    ---
    `for`, `while`, `break`, `continue`

    迴圈前可以加上 label 如下：

    {:[data-lang=javascript]}
    ```
      outerLoop: for(;;){
        ……
          if(...){
            break outerLoop;
          }
          if(...){
            continue outerLoop;
          }
        ……
      }
    ```


  !SLIDE
    switch case
    -----------
    記得 `break;`

    ~~~
      var name = "董允", comment;
      switch(name){
        case '郭攸之':
        case '費依':
        case '董允':
          comment = '此皆良實，志慮忠純';
          break;
        case '向寵':
          comment = '試用之於昔日，先帝稱之曰「能」';
          break;
        default:
          comment = '親賢臣，遠小人，此先漢所以興隆也';
      }
      document.write(comment);
    ~~~

  !SLIDE
    {:.trailer}
    註解
    ---

    `/* 多行 */` 與 `// 單行`

!ENDSTACK

{:.chapter}
!SLIDE
  JS 又和 C 不同
  ---
  型態與其他

!STACK

  {:#reserved}
  !SLIDE
    保留字 & `關鍵字`
    ---
      不能當作變數名稱、屬性名稱的字。
        abstract boolean `break` byte `case` `catch` char class const `continue`
        debugger `default` `delete` `do` double `else` enum export extends
        `false` final finally float `for` `function`
        goto `if` implements import `in` `instanceof` int
        interface long native `new` `null` package private protected public `return`
        short static super `switch` synchronized
        `this` `throw` throws transient `true` `try` `typeof`
        `var` volatile `void` `while` `with`

  !SLIDE
    特殊值
    ---
      `NaN`: Not a number，不是數字。
      ~~~
        document.write(
          26 + parseInt('二十四個比利', 10) );
      ~~~

      `undefined`: 未定義。變數的預設值、function 預設的回傳值。
      ~~~
        var hey, noop = function(){};
        document.write(hey + '<br>');
        document.write(noop());
      ~~~

      `null`: 什麼都不是。

  !SLIDE
    String 字串
    ---
      * 單引號(")、雙引號(')效果相同
      * `\'`,  `\"`, `\\`,  `\n`
      * `length` 屬性：長度
      * 無法修改字串 (immutable)。
      * UCS-2 編碼 （UTF-16 的前身）
      * [https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String#String_instances](屬性與方法)

    {:.small[data-lang=javascript]}
    ~~~
      var str = "侍中尚書、長史、參軍，此悉貞良死節之臣也";

      str[11] = "庛";
      document.write( str[11] + '<br>' );
      document.write( str.split("、") + '<br>');
      document.write( str.slice(11) + '<br>' );
    ~~~

  !SLIDE
    Function 函數
    ---

    {:.leader}
    建一個函數：
    `function 函式名 (引數們) { ... }`
    `var 函數名 = function (引數們) { ... }`

    呼叫一個函數：
    `函數名(要傳的引數)`

    {:.fragment}
    * 函數可以像變數一樣被丟來丟去。
    * 無法像 C 那樣指定引數預設值。
    * 呼叫時引數的個數，和函數定義的引數個數可以不一樣。

  !SLIDE
    Function 函數
    ---

    {:.small.leader}
    ~~~
      // eachOf：
      // 將 array 裡的每個東西都丟進 func 當引數
      var eachOf = function(array, func){
        for(var i = 0; i < array.length; i+=1){
          func(array[i]);
        }
      }

      eachOf(["棋盤", "稿紙", "綠豆糕"], function(item){
        document.write('啊，好似' + item + '似的！');
      });
    ~~~

    把 function 當成引數傳給另一個 function，<br>在綁定 event handler （或稱 callback function ) 時很常用

  !SLIDE
    Object 物件
    ---
    `{key: value1, key2: value2, ……}`

    * value 可以是函數
    * 函數裡 `this` 指自己這個物件
    * 可以隨時幫 object 增加成員

    {:.small[data-lang=javascript]}
    ~~~
      var person = {
        name: "董允",
        comment: "志慮忠純，是以先帝簡拔以遺陛下。",
        reward: function(){
          // this：
          document.write("臣" + this.name + "謝皇上賜賞。")
        }
      };

      // 增添「職位」
      person.position = "侍中";
      person.reward("田地"); // 引數長度和定義可以不一樣
      console.log('person:', person);
    ~~~

  !SLIDE
    Object 物件
    ---
    用 key 存取物件內的 value：`object.key` 或 `object["key"]`

    ~~~
      var person = {
        name: "董允",
        comment: "志慮忠純，是以先帝簡拔以遺陛下。",
        reward: function(){
          document.write("臣" + this.name + "謝皇上賜賞。")
        }
      };

      document.write(person.name + '<br>');
      document.write(person['name'] + '<br>');
      person['reward']();
    ~~~

    key 為[?reserved](保留字)時請用 `object["key"]`

  !SLIDE
    Array 陣列
    ---
    `[元素1, ……, 元素N]`
    * 元素不一定要都同一種型態
    * length 為陣列長度
    * 陣列是一種物件（陣列繼承自物件）。

    {:.small[data-lang=javascript]}
    ~~~
      var arr = [3.14, "任意文字", {text: "物件"}, ["另一個", "陣列"]];
      for(var i=0; i<arr.length; i+=1){
        document.write( arr[i] + '<br>');
      }
      document.write('<hr>');
      document.write('陣列長度：' + arr.length + '<br>');
    ~~~


  !SLIDE
    Array method
    ---
    * `join(sep)` 把每個元素轉成字串，用分隔字元 `sep` 接起來。
    * `push(item...)` 將 `item` 附加到末端，回傳新長度。
    * `pop()` 移除並回傳最後一個元素。
    * 詳見 [https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array#Array_instances](MDN Docs)

    {:[data-lang=javascript]}
    ~~~
      var names = ['郭攸之', '費依'];
      names.push('董允');
      document.write(names.join('、') + '，此皆良實，志慮忠純。');
    ~~~

  !SLIDE
    Just for reference
    ---

    Javascript 物件變數只存 reference（物件的位置）。
    於是 `物件 === 物件` 結果很微妙。

    {:.small[data-lang=javascript]}
    ~~~
      var obj = {key: "value"},
          obj2 = obj;

      // obj, obj2 reference 相同
      // obj 和新建的物件 reference 不同，即使值都一樣，
      // === operator 還是把它認作不同。
      
      document.write([
        'obj === obj2 :',   obj === obj2,           '<br>',
        'obj === {...} :' , obj === {key: "value"}
      ].join(''));
    ~~~

    Javascript 沒有原生的 Object `equals` 方法。
    比較兩個 Javascript Object 是否每個 key、value 相同，[http://stackoverflow.com/questions/201183/how-do-you-determine-equality-for-two-javascript-objects](其實很麻煩)。
    [http://underscorejs.org](Underscore.js) : utility function library.

  !SLIDE
    Pass-by-reference
    ---

    Javascript 物件變數當引數時，為 pass-by-reference。
    其他型態，如 Number，則是 pass-by-value。
    {:.small[data-lang=javascript]}
    ~~~
      var num = 3.14,             // Number
          arr = [ "任意文字" ];   // Array

      // 蓋一個 function，把 arr、num 傳進去修改
      var alter = function(a, n){
        a[0] = "隨便文字"; n = 1.618;
      };

      // 呼叫這個 function
      alter(arr, num);

      // 看 arr, num 有沒有被修改
      document.write([
        'arr:', arr, '<br>',
        'num:', num
      ].join(''));
    ~~~

!ENDSTACK

{:.chapter}
!SLIDE
DOM Window
------

!STACK
  !SLIDE
    window object
    ---
    Javascript 裡有個變數是一切的根源。
    `window` 就是根源。
    {:[height=400]} ![images/js/window.png](Javascript console 印出 window object)

  !SLIDE
    時間到
    ------
    `setTimeout(callback, t)` 會在 `t` ms 後執行 `callback`。<br>回傳一個 handle。
    `clearTimeout(handle)` 取消此倒數。

    {:[data-lang=javascript]}
    ~~~
      document.write('多想兩分鐘');
      setTimeout(
        function(){
          document.write(
            '你可以不用浪費兩分鐘。'
          );
        },
        60*2*1000
      );
    ~~~

  !SLIDE
    網址相關
    --------
    `location.href`, `location.hash`

    {:[data-lang=javascript]}
    ~~~
      document.write([
        'href: ', location.href, '<br>',
        'hash: ', location.hash
      ].join(''));
    ~~~

    傳值進去會重新整理瀏覽器頁面。

  !SLIDE
    彈出式視窗
    ----------
    `alert`, `confirm`, `prompt`

    {:[data-lang=javascript]}
    ~~~
      var answer;
      // answer = confirm('綠豆糕像不像稿紙？');
      if(answer){
        // alert('很像。');
      }else{
        // alert('不像。');
      }
    ~~~

  !SLIDE
    資料儲存
    ----------
    `localStorage`, `sessionStorage`
    
    * 用法像 javascript object
    * `localStorage.KEY = VALUE`，`VALUE` 只能是字串
    * `localStorage` 會一直存在，`sessionStorage` 僅存在瀏覽器分頁中

    {:.jquery.small[data-lang=javascript]}
    ~~~
      if(!localStorage.created){
        localStorage.created = Date();
      }
    ~~~

    ![images/js/localStorage.png](Resources tab)


  !SLIDE
    用字串表示物件
    ----------
    `localStorage` 的值只能存字串，無法儲存 javascript 物件
    {:.fragment}
    把物件用一個字串來表示。

    <div class="fragment">
      ### JSON
      `Javascript String Object Notation`

      * 類似 javascript 物件的初始化方法（object literal）
      * 不會把 function (method) 變成字串

      `物件 = JSON.parse(字串)`、`字串 = JSON.stringify(物件)`

      {:.jquery.small[data-lang=javascript]}
      ~~~
        var man = {like: ['紅茶', '總匯三明治'], mood: '淡定',
                   say: function(){return '不要哭了'}},
            manstr = JSON.stringify(man);
        document.write(manstr + '<hr>' + JSON.parse(manstr));
        //sessionStorage.man = manstr;
      ~~~

    </div>

  !SLIDE
    `document.cookie`
    ----------
    * 另一種資料存儲
    * 同樣是 key-value pair, value 限字串
    * 用分號作分隔，以字串儲存
    * 4kB 大小限制（`localStorage` 有 5MB）
    * server 可以設定給 browser 存什麼 cookie
    * browser 和 server 要檔案時，會附上 cookie

    -----

    [https://developer.mozilla.org/en-US/docs/DOM/document.cookie](MDN Doc)

!ENDSTACK

{:.chapter}
!SLIDE
jQuery
------
替你操控 DOM (HTML 的 API)

!STACK
  !SLIDE
    開始用 jQuery
    ---

    神秘咒語
    ```
      <script type="text/javascript"
       src="https://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js">
      </script>
    ```

    然後施魔法

    {:.small.html}
    ~~~
      <p></p>

      &lt;script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js"&gt;&lt;/script&gt;
      &lt;script type="text/javascript"&gt;
        $('p').text('jQuery 好 Q!');
      &lt;/script&gt;
    ~~~

  !SLIDE
    全能 DOM 改造王
    ---
    物件 5927：不方便的 API
    {:.demo-dom-native.small[data-lang=javascript]}
    ~~~
      // 偵測是否同意出師表
      var form = document.querySelector('#submitform');

      form.addEventListener('submit', function(e){
        if(!document.querySelector('#tos').checked){
          alert('請詳閱出師表。');
          e.preventDefault();
        }
      });

      // 增加推薦人
      document.querySelector('.add-referral')
              .addEventListener('click', function(){

        // 開一個 buffer，建立下面架構：
        /*
          <p>
            <input type="text" name="referral">
            <a class="del" href="javascript:;">刪除</a>
          </p>
        */
        var buffer = document.createDocumentFragment(),
            p      = buffer.appendChild(
                        document.createElement('p')),
            txt    = p.appendChild(
                        document.createElement('input')),
            del    = p.appendChild(
                        document.createElement('a'));

        txt.setAttribute('type', 'text');
        txt.setAttribute('name', 'referral');
        del.setAttribute('class', 'del');
        del.setAttribute('href', 'javascript:;');
        del.innerHTML = '刪除';

        // 把 buffer 內容塞進 DOM
        document.querySelector('#referrals')
                .appendChild(buffer);
      });

      // 刪除推薦人
      form.addEventListener('click', function(e){
        // 若 'click' 事件來自 <a class="del">
        if(e.target.className === 'del'){
          // 把包著 <a class="del"> 之 <p> 整個移除。
          var p = e.target.parentNode;
          p.parentNode.removeChild(p);
        }
      });
    ~~~

    DOM 這個 API 很長，相當困擾。

  !SLIDE
    一級 DOM 改造士: jQuery
    ---

    ### SPEC

    * 表單送出時，檢查是否接受出師表
    * 按「增加推薦人」時，蓋一個下面的東西：
      {:.small[style=width: 400px; margin: 0 auto 1em;]}
      ```
        <p>
          <input type="text" name="referral">
          <a class="del">刪除</a>
        </p>
      ```
    * 按裡頭的「刪除」時，把整個 `<p>` 移除。

    ### 希望
      寫少一點，作到的事情更多。

  !SLIDE
    BEFORE
    ---
    {:.demo-dom-native.small}
    ~~~
      var form = document.querySelector('#submitform');

      // 偵測是否同意出師表
      form.addEventListener('submit', function(e){
        if(!document.querySelector('#tos').checked){
          alert('請詳閱出師表。');
          e.preventDefault();
        }
      });

      // 增加推薦人
      document.querySelector('.add-referral')
              .addEventListener('click', function(){

        // 開一個 buffer，建立下面架構：
        var buffer = document.createDocumentFragment(),
            p      = buffer.appendChild(
                        document.createElement('p')),
            txt    = p.appendChild(
                        document.createElement('input')),
            del    = p.appendChild(
                        document.createElement('a'));

        txt.setAttribute('type', 'text');
        txt.setAttribute('name', 'referral');
        del.setAttribute('class', 'del');
        del.setAttribute('href', 'javascript:;');
        del.innerHTML = '刪除';

        // 把 buffer 內容塞進 DOM
        document.querySelector('#referrals')
                .appendChild(buffer);
      });

      // 刪除推薦人
      form.addEventListener('click', function(e){
        // 若 'click' 事件來自 <a class="del">
        if(e.target.className === 'del'){
          // 把包著 <a class="del"> 之 <p> 整個移除。
          var p = e.target.parentNode;
          p.parentNode.removeChild(p);
        }
      });
    ~~~

  !SLIDE
    AFTER
    ---

    <iframe width="150" height="40" style="position: absolute; right: 0; top: 0; opacity: 0.1;" src="http://www.youtube.com/embed/E9gfiTAhScM?rel=0" frameborder="0"></iframe>

    なんということでしょう!

    {:.demo-dom-jquery.small[data-lang=javascript]}
    ~~~
      $('#submitform').on('submit', function(e){
        // 偵測是否同意出師表
        if(!$('#tos').attr('checked')){
          alert('請詳閱出師表。');
          e.preventDefault();
        }
      }).on('click', '.del', function(){
        // 刪除推薦人
        // 把包著 <a class="del"> 之 <p> 整個移除。
        $(this).parents('p').remove();
      });

      // 增加推薦人
      $('.add-referral').on('click', function(){
        // 把下面內容塞進 DOM
        $('<p><input type="text" name="referral"><a class="del">刪除</a></p>').appendTo('#referrals');
      });
    ~~~

!ENDSTACK

{:.chapter}
!SLIDE
  jQuery Object
  ---

!STACK
  !SLIDE
    神奇的 `$`
    ---

    {:[data-lang=javascript][style=width: 520px; margin: 0 auto 1em;]}
    ```
      $(SELECTOR) or $("HTML放字串裡")
    ```

    * `$` 是一個 function。
    * 傳入 [http://api.jquery.com/category/selectors/](css selector) → 回傳找到的 element
    * 傳入 HTML tag 字串 → 回傳新蓋的 element

    ---

    element 被包在 jQuery obejct 裡頭。

    {:[height=190]}![images/js/jqObj.png](obj)

  !SLIDE
    jQuery Object
    ---

    {:[width=900]}![images/js/jqObj.png](obj)

    * 看起來像陣列
    * 有 length 屬性
    * 有[http://api.jquery.com](很多 method) 可以用

  !SLIDE
    `$()`
    ----
    
    從「拿到 jQuery Object」開始
    
    {:[data-lang=javascript][style=width: 420px; margin: 0 auto 1em;]}
    ```
      $(SELECTOR) or $(HTML)
    ```
    
    其方法通常會回傳 jQuery Object 本身，故支持 chaining。

    {:.jquery-dom.small}
    ~~~
    <p></p>
    <p></p>
    &lt;script type="text/javascript"&gt;
      // 選取現有的 p element 來改造
      $('p').css('color', '#00f').text('我是內容');

      // 蓋一個新的 HTML element，插入現有的 p
      $('<span>。</span>').appendTo('p');
    &lt;/script&gt;
    ~~~

!ENDSTACK

{:.chapter}
!SLIDE
  jQuery API
  ---

!STACK
  !SLIDE
    Manipulation
    ---
    操弄 DOM 結構與屬性

    * [http://api.jquery.com/category/css/](讀取 / 新增 class 或 CSS style)
    * [http://api.jquery.com/category/attributes/](讀取 / 新增 / 移除屬性)
    * 在 [http://api.jquery.com/category/manipulation/dom-insertion-inside/](裡面) / [http://api.jquery.com/category/manipulation/dom-insertion-outside/](旁邊) 插入/移除 DOM element
    * [http://api.jquery.com/category/manipulation/dom-insertion-around/](包覆)目前 DOM element

    ---

    [http://api.jquery.com/category/manipulation/](Manipulation - jQuery API)

  !SLIDE
    Manipulation
    ---

    {:.jquery-dom.small.maxheight}
    ~~~
      <style type="text/css">
        p{
          border: 20px solid yellow;
          margin: 20px; padding: 20px;
        }
        .clearstyle{
          border: 0; margin: 0; font: 20px monospace;
        }
      </style>

      <p>我只是個 p。</p>

      &lt;script type="text/javascript" &gt;
        var old_p = $('p');

        // 複製原本的 <p>，加上 class
        var new_p = old_p.clone().addClass('clearstyle');

        // 設定新的 <p> 的內容
        new_p.html([
          'innerWidth: ', old_p.innerWidth(), '<br>',
          'outerWidth: ', old_p.outerWidth()
        ].join(''));

        // 設定 HTML element 屬性
        new_p.attr('title', '請拿左上角的尺');

        // 把新的 <p> 插入 DOM element
        old_p.after(new_p);
      &lt;/script&gt;
    ~~~

    [http://api.jquery.com/addClass/](`.addClass\(\)`) [http://api.jquery.com/clone/](`.clone\(\)`) [http://api.jquery.com/innerWidth/](`.innerWidth\(\)`) [http://api.jquery.com/attr/](`.attr\(\)`) [http://api.jquery.com/after/](`.after\(\)`)

  !SLIDE
    Traversing
    ---
    從目前 element 找到另一個 element

    * [http://api.jquery.com/category/traversing/tree-traversal/](找親戚)
    * [http://api.jquery.com/category/traversing/filtering/](過濾)目前的 jQuery object

    ---

    [http://api.jquery.com/category/traversing/](Traversing - jQuery API)

  !SLIDE
    Traversing
    ---

    {:.jquery-dom.small.maxheight}
    ~~~
      <style type="text/css">
        p{
          padding: 1em; margin: 1em;
        }
        .border1 {
          border: 1px solid blue;
        }
        .border2 {
          border: 1px solid green;
        }
        .bg{
          background: #cfc;
        }
      </style>

      <section>
        Section 裡頭。
        <article>
          article  裡頭。
          <p>
            p 裡頭。
          </p>
          <p></p>
        </article>
      </section>

      &lt;script type="text/javascript"&gt;
        $('p').parents('section').addClass('border1');
        $('section').find('p').addClass('border2');
        $('section').find('p').not(':empty').addClass('bg');
      &lt;/script&gt;

    ~~~
    [http://api.jquery.com/parents/](`.parents\(\)`) [http://api.jquery.com/find/](`.find\(\)`) [http://api.jquery.com/not/](`.not\(\)`)

!ENDSTACK

{:.chapter}
!SLIDE
  jQuery Event
  ---

!STACK
  !SLIDE
    Events
    ---
    互動的主要要素。

    `$物件.on('事件', handler)`
    `$物件.on('事件', selector, handler)`

    ---

    [http://api.jquery.com/category/events/](Events - jQuery API)
    [http://api.jquery.com/on/](`.on\(\)`)  [http://api.jquery.com/off/](`.off\(\)`)

  !SLIDE
    Event handler 
    ---
    事件被觸發時，會被執行的 function，用來處理此事件。又稱作 `callback`。

    {:.jquery-dom.small.maxheight}
    ~~~
    <p>按我按我</p>
    &lt;script type="text/javascript"&gt;
      var $body = $('body');
      $body.on('click', function(e){
        console.log('Event Object', e);
      });
    &lt;/script&gt;
    ~~~

    {:.fragment}
    「callback」：未來某條件符合時，會被執行的 function。

    {:.fragment}
    * 第一個引數是 [http://api.jquery.com/category/events/event-object/](Event object)
    * `event.target`：被觸發了該事件的 HTML Element。

    {:.fragment}
    以下用 `event` 指稱 handler 裡的 event object。


  !SLIDE
    Event Propagation
    ---

    子元素的事件觸發時，父元素的該事件也會跟著被觸發 (bubbling)。

    {:.jquery-dom.small.maxheight}
    ~~~
    <table>
      <tr> <td>31 號 2 樓</td> <td>33 號 2 樓</td> </tr>
      <tr> <td>31 號 1 樓</td> <td>33 號 1 樓</td> </tr>
    </table>

    <style type="text/css">
      table{
        border-collapse: separate;
        border: 3px solid black;
      }
      table td{
        border: 3px solid black;
      }
    </style>

    &lt;script type="text/javascript"&gt;
      var log = function(msg){
        $('body').append(msg + '<br>');
      };
      $('td').on('click', function(e){
        var td = $(this);
        log('拜訪' + td.text());
        td.css('borderColor', 'red');
      });
      $('tr').on('click', function(e){
        log('拜訪某層');
        $(this).css('background', '#ff0');
        // e.stopPropagation();
      });
      $('table').on('click', function(e){
        log('拜訪此建築');
        $(this).css('borderColor', '#990');
      });
    &lt;/script&gt;
    ~~~
    {:.fragment}
    [http://api.jquery.com/event.stopPropagation/](`event.stopPropagation\(\)`) 終止事件散播。


  !SLIDE
    抑制原本的動作
    ---

    [http://api.jquery.com/event.preventDefault/](`event.preventDefault\(\)`)

    {:.demo.small.maxheight[data-lang=javascript]}
    ~~~
      $('#submitform').on('submit', function(e){
        // 偵測是否同意出師表
        if(!$('#tos').attr('checked')){
          alert('請詳閱出師表。');
          e.preventDefault();
        }
      });
      $('a').on('click', function(e){
        if(!confirm('您即將離開此頁，要繼續嗎？')){
          e.preventDefault();
        }
      });
    ~~~

    和 `event.stopPropagation()` 不同。

  !SLIDE
    handler 的回傳值
    ---

    `return false` = `event.stopPropagation()` + `event.preventDefault()` + `return`

    {:.demo[data-lang=javascript]}
    ~~~
      $('#submitform').on('submit', function(e){
        // 偵測是否同意出師表
        if(!$('#tos').attr('checked')){
          alert('請詳閱出師表。');
          return false;
          // 下面不會被執行。
        }
        alert('即將送出表單...');
      });
    ~~~

  !SLIDE
    `.on()`
    ---

    `$物件.on('事件', [selector,] handler)`

    若觸發者為 `$物件` 子孫中符合 `selector` 者，則執行 handler。

    {:.demo-dom-jquery.small.maxheight[data-lang=javascript]}
    ~~~
      // 此行執行時，<a class="del"></a> 還不存在！
      //
      $('#submitform').on('submit', function(e){
        // 偵測是否同意出師表
        if(!$('#tos').attr('checked')){
          alert('請詳閱出師表。');
          e.preventDefault();
        }
      }).on('click', '.del', function(){
        // 刪除推薦人：
        // 把包著 <a class="del"> 之 <p> 整個移除。

        // 這裡的 this 是 .del
        $(this).parents('p').remove();
      });

      // 增加推薦人
      $('.add-referral').on('click', function(){
        // 把下面內容塞進 DOM
        $('<p><input type="text" name="referral"><a class="del">刪除</a></p>').appendTo('#referrals');
      });
    ~~~


  !SLIDE
    捷徑
    ----

    `.on('click', handler)` → `.click(handler)`
    `.on('submit', handler)` → `.submit(handler)`

    {:.demo-dom-jquery.small[data-lang=javascript]}
    ~~~
      $('#submitform').submit(function(e){
        // 偵測是否同意出師表
        if(!$('#tos').attr('checked')){
          alert('請詳閱出師表。');
          e.preventDefault();
        }
      }).on('click', '.del', function(){ // 這行沒改。
        // 刪除推薦人：
        // 把包著 <a class="del"> 之 <p> 整個移除。
        $(this).parents('p').remove();
      });

      // 增加推薦人
      $('.add-referral').click(function(){
        // 把下面內容塞進 DOM
        $('<p><input type="text" name="referral"><a class="del">刪除</a></p>').appendTo('#referrals');
      });
    ~~~

    不加 `handler` 則可觸發相對應事件（執行該事件的 callback）；
    `.submit()` 還可以送出表單。

  !SLIDE
    常用的 events
    ---

    ### 表單相關
    * `focus`, `blur`：得到 focus / 失去 focus 時
    * `focusin`, `focusout`：自己或裡面的元素得到 / 失去 focus 時
    * `change`：表單元素的值（`value`）改變時
    * `submit`: 表單送出前

    ### 滑鼠相關
    * `click`：被點擊（按下滑鼠＋在元素內放開滑鼠）時
    * `mousedown`, `mouseup`, `mousemove`: 按下 / 放開 / 移動滑鼠時
    * `mouseenter`，`mouseleave`：滑鼠進入 / 離開某元素

  !SLIDE
    常用的 events (續）
    ---

    ### 鍵盤相關
    * `keydown`, `keyup`：按下 / 放開鍵盤按鍵時

    ### 載入相關
    * `ready`：DOM 載入完成時
    * `error`：圖片載入錯誤時
<!--
  !SLIDE
    Exercise
    ---
    [sample/jquery-exercise.html](能新增項目的清單)。

    ### SPEC

    * 按「新增項目」按鈕可以在 `<ul>` 的開頭新增一個 `<li>`
    * `<li>` 裡頭有 `<input>` 且進入打字狀態。
    * 打完字後按 enter 鍵，可以結束編輯。
    * 結束編輯時，將目前的所有項目存進 `localStorage`。順序要保留。
    * 頁面剛被打開時，從 `localStorage` 裡撈之前存的資料。
-->
!ENDSTACK


{:.chapter}
!STACK
  jQuery Ajax
  ---
  [http://jqueryui.com/demos/](jQuery UI)

!STACK
  !SLIDE
    XMLHttpRequest
    ---
    * DOM 提供之 API 之一
    * 用 javascript 送 GET/POST 等到 server
    * 不用重新整理頁面
    * 處理 server 回傳之資料
    * 可處理 JSON / XML / HTML / 純文字

    <div class="fragment">
      ### ajax

      {:[style=text-align:center]}
      ```
      Asynchronous JavaScript and XML
      ```
      * 用 XMLHttpRequest 和 server 溝通
      * 曾使用當時最尖端的 XML 格式交換資料
      * 用 Javascript 操作 DOM，執行動態效果
      * 不等遠端回應，繼續執行（asynchronous）
      * 用 callback 處理遠端回傳的資料
    </div>

  !SLIDE
    jQuery Ajax
    ---

    jQuery 包裝了 Ajax 相關功能

    * `$.get` 送 get request 給 server
    * `$.post` 送 post request 給 server
    * `$.ajax` 為 `$.get`、`$.post` 等 ajax 相關的核心 function

    [http://api.jquery.com/category/ajax/](jQuery Ajax 分類)

  !SLIDE
    `$.get` 範例
    ---

    ```
      $.get(URL, DATA, CALLBACK, TYPE)
    ```

    * `DATA`: 要送到遠端的資料，object 或字串。
    * `TYPE`: 如何解讀遠端的回應，可以是 `'json'`, `'text'`, `'html'` 等。

    {:.jquery-dom.small.maxheight}
    ~~~
      <button>送出 GET request</button>
      &lt;script type="text/javascript"&gt;
        $('button').click(function(){
          $.get(
            'http://graph.facebook.com/109258422427289',
            {},
            function(data, status){
              console.log('data', data);
              console.log('status', status);
              $('<span></span>').text(data.name)
                                .appendTo('body');
            },
            'json'
          );
          console.log('這是 $.get 的後面。');
        });
      &lt;/script&gt;
    ~~~

  !SLIDE
    `$.getJSON`
    ---

    ```
      $.getJSON(URL, DATA, CALLBACK)
    ```

    `$.get(URL, DATA, CALLBACK, 'json')` 的簡寫。

    {:.jquery-dom.small.maxheight}
    ~~~
      <button>用 getJSON 送出 GET request</button>
      &lt;script type="text/javascript"&gt;
        $('button').click(function(){
          $.getJSON(
            'http://graph.facebook.com/109258422427289',
            {},
            function(data, status){
              console.log('data', data);
              console.log('status', status);
              $('<span></span>').text(data.name)
                                .appendTo('body');
            }
          );
        });
      &lt;/script&gt;
    ~~~

  !SLIDE
    Google Geocoding API
    ---

    {:.jquery-dom.small.maxheight}
    ~~~
      地址：
      <textarea>台北市羅斯福路四段一號</textarea>
      <button>用 getJSON 送出 GET request</button>
      &lt;script type="text/javascript"&gt;
        $('button').click(function(){
          $.getJSON(
            'http://maps.googleapis.com/maps/api/geocode/json',
            {
              address: $('textarea').val(),
              sensor: false
            },
            function(data, status){
              console.log('data', data);
              console.log('status', status);
            }
          );
        });
      &lt;/script&gt;
    ~~~

    {:.fragment}
    （′,_ゝ`) 


  !SLIDE
    淡定。
    ---

    ```
    Origin http://localhost:3000 is not allowed by Access-Control-Allow-Origin.
    ```
    
    <hr>

    {:.fragment}
    瀏覽器不會信任來自別的 Domain 的 ajax response。
    {:.fragment}
    除非 response 裡有 `Access-Control-Allow-Origin` 這個 header。
    {:.fragment}
    javascript 向當前頁面的 domain 送 ajax，則沒有這個問題。


!ENDSTACK


{:.chapter}
!STACK
  jQuery UI
  ---
  [http://jqueryui.com/demos/](jQuery UI)

!STACK
  !SLIDE
    jQuery UI
    ---
    * [http://jqueryui.com/demos/sortable/](拖曳等等)的互動
    * [http://jqueryui.com/demos/dialog/](對話視窗)之類的 Widgets
    * 更多[http://jqueryui.com/demos/show/](特效)

    ### Why 介紹 it?

    * jQuery UI 元件有統一的 API
    * jQuery UI 是複雜程度適中的一種 jQuery plugin

    {:.fragment}
    而且作業會用到。

  {:#jQueryUI-install}
  !SLIDE
    安裝 jQuery UI
    ---
    * 選擇 Theme，下載 jQuery UI
    * 選擇要用的 plugin
    * 引入需要的 css 和 javascripts

  !SLIDE
    安裝 jQuery UI (I)
    ---
    選擇 Theme，下載 jQuery UI
    {:[height=200]}![images/js/themeroller.png](Theme roller)
    {:[height=200]}![images/js/download.png](下載)

  !SLIDE
    安裝 jQuery UI (II)
    ---
    載下來的檔案：
    ![images/js/jqueryui.png](檔案們)

    * `css/THEME名/` 內有 jQuery UI 用的圖檔與 css 檔。
    * `js/` 底下有 jQuery 與 jQuery UI 的 js 檔。
    * development bundle 有文件和各個元件的原始碼。
    * index.html 是此元件的 demo。

  !SLIDE
    安裝 jQuery UI (III)
    ---
    ![images/js/tocss.png](放到 css 資料夾)
    開 `css/THEME名`，把 css 檔和 image 目錄複製到你放 css 的地方。
    ![images/js/tojs.png](放到 js 資料夾)
    把 jQuery UI 的 js 檔複製到放 js 的地方。

    * 打開要安裝 jQuery UI 的網頁，用 `link` 標籤連結 css 檔。
    * 同上，用 `script` 標籤連結 jQuery UI 的 js 檔。
     
  !SLIDE
    UI css 與 image
    ---
    {:[height=400]}![images/js/changecss.png](要修改的東西)
    若分開放置把 image 目錄和 css 檔，請把 css 檔中所有 `url(...)` 的路徑，換成此 css 檔到圖檔的相對路徑。


  !SLIDE
    jQuery UI API 形式
    ---
    jQuery UI 各種元件的的操作方式都很類似。
    
    <div class="fragment">

      ---

      以 jquery UI `dialog` 為例

      * `$(元素).dialog({autoOpen: false, resizable: false})`：初始化 `dialog`。
      * `$(元素).dialog('open')`：呼叫 dialog 的 method。
      * `$(元素).on('dialogopen', handler)`：指定 event handler。

      詳細的初始化 `option`、`event`、`method`，都在文件下方。

    </div>
<!--
  !SLIDE
    Demo
    ---
    用 jQuery UI sortable，把[sample/jquery-exercise.html](能新增項目的清單)改成能拖曳的。

    ### SPEC

    * 要能上下拖曳清單項目
    * 拖曳結束時，將目前順序存進 `localStorage`
    * 新增刪除按鈕，按下去會有 jQuery UI dialog 確認是否繼續
    * 別忘了刪除後也要更新 `localStorage`

    <hr>
    [sample/jqueryui-exercise.html](修改後)
-->
!ENDSTACK

{:.chapter}
!SLIDE
  Debugging
  ---

!STACK
  !SLIDE
    console.log
    ---
    * 物件可能會被更動

    ~~~
      var arr = ['棋盤', '稿紙', '綠豆糕'];
      console.log('arr: ', arr);
      arr.shift(); // 移除第 0 個
      console.log('shift 之後：arr: ', arr);
    ~~~

  !SLIDE
    中斷點
    ---
    * 開發人員工具的「Scripts」 面板
    * 選擇要 debug 的檔案
    * 中斷時可用 console
    * "Pause on uncaught exception" 按鈕
    ![images/js/pausebutton.png](pause)

!ENDSTACK

!SLIDE
  THE END
  ===

  {:.nav}
  * [html.html](HTML)
  * [css.html](CSS)
  * [js.html](Javascript)
  * [advancedjs.html](Advanced JS)
